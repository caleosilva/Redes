# Função para lidar com cada conexão (cliente):
def handle_client(conn):

    global active_connections

    with connection_lock:
        if active_connections >= max_connections:
            print("Limite de conexões atingido. Recusando nova conexão.")
            conn.close()
            return

        active_connections += 1

    try:
        # Lógica de tratamento da conexão
        while True:
            # Processamento dos dados recebidos
            id = conn.recv(1024).decode('utf-8')
            if not id:
                break
            else:
                r = requests.get('http://localhost:8000/' + id)

                # Verifica se a solicitação foi bem-sucedida (código de status 200)
                if r.status_code == 200:
                    texto = r.text
                    # print()
                    conn.send(texto.encode('utf-8'))
    except Exception as e:
        print("Erro:", e)
    finally:
        conn.close()

        # Garante que apenas uma thread por vez possa acessar essa seção crítica de código:
        with connection_lock:
            active_connections -= 1

def main():

    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((host, port))
    server_socket.listen(max_connections)

    print("Servidor ouvindo em", host, "porta", port)

    try:
        while True:

            conn, addr = server_socket.accept()
            print('Conexão estabelecida com', addr[0] + ':' + str(addr[1]))
            client_thread = threading.Thread(
                target=handle_client, args=(conn,))
            client_thread.start()
    except KeyboardInterrupt:
        print("Servidor encerrado.")
    finally:
        server_socket.close()


if __name__ == "__main__":
    main()